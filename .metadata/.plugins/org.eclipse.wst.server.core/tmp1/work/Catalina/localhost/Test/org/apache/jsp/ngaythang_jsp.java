/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.45
 * Generated at: 2025-09-13 01:37:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.hoang.DateValidator;
import java.util.Calendar;

public final class ngaythang_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("com.hoang.DateValidator");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Ngày Tháng Năm</title>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4\"></script>\r\n");
      out.write("    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.8/dist/css/bootstrap.min.css\" rel=\"stylesheet\"\r\n");
      out.write("        integrity=\"sha384-sRIl4kxILFvY47J16cr9ZwB07vP4J8+LH7qKQnuqkuIAvNWLzeN8tE5YBujZqJLB\" crossorigin=\"anonymous\">\r\n");
      out.write("    <style type=\"text/tailwindcss\">\r\n");
      out.write("        @theme {\r\n");
      out.write("        --color-clifford: #da373d;\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container mt-5\">\r\n");
      out.write("        <h1 class=\"uppercase !text-blue-500 text-[24px] text-center\">Xem ngày tháng năm</h1>\r\n");
      out.write("        <div class=\"flex gap-4 mt-4\">\r\n");
      out.write("   			");

             	Calendar c = Calendar.getInstance();
             	int year = c.get(Calendar.YEAR);
             	int month = c.get(Calendar.MONTH) + 1;
             	int day = c.get(Calendar.DAY_OF_MONTH);
             	
             	
             
      out.write("\r\n");
      out.write("            <select class=\"form-select\" aria-label=\"Default select example\" id=\"DaySelect\">\r\n");
      out.write("                ");

                	for (int i = 1; i <= 31; i++) {
                		if (i == day) {
                
      out.write("\r\n");
      out.write("                			<option selected value=\"");
      out.print(day );
      out.write('"');
      out.write('>');
      out.print(day );
      out.write("</option>\r\n");
      out.write("                ");
		} else { 
      out.write("\r\n");
      out.write("                \r\n");
      out.write("                			<option value=\"");
      out.print(i );
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("                ");
		}
                	}
                
      out.write("\r\n");
      out.write("               \r\n");
      out.write("            </select>\r\n");
      out.write("            <select class=\"form-select\" aria-label=\"Default select example\" id=\"MonthSelect\">\r\n");
      out.write("                ");

                	for (int i = 1; i <= 12; i++) {
                		if (i == month) {
                
      out.write("\r\n");
      out.write("                			<option selected value=\"");
      out.print(month );
      out.write('"');
      out.write('>');
      out.print(month );
      out.write("</option>\r\n");
      out.write("                ");
		} else { 
      out.write("\r\n");
      out.write("                \r\n");
      out.write("                			<option value=\"");
      out.print(i );
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("                ");
		}
                	}
                
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("            <select class=\"form-select\" aria-label=\"Default select example\" id=\"YearSelect\">\r\n");
      out.write("                ");

                	for (int i = year - 10; i <= year; i++) {
                		if (i == year) {
                
      out.write("\r\n");
      out.write("                			<option selected value=\"");
      out.print(year );
      out.write('"');
      out.write('>');
      out.print(year );
      out.write("</option>\r\n");
      out.write("                ");
		} else { 
      out.write("\r\n");
      out.write("                \r\n");
      out.write("                			<option value=\"");
      out.print(i );
      out.write('"');
      out.write('>');
      out.print(i );
      out.write("</option>\r\n");
      out.write("                ");
		}
                	}
                
      out.write("\r\n");
      out.write("            </select>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"mt-3 flex justify-end\">\r\n");
      out.write("            <button class=\"btn btn-primary w-40\" onclick=\"handleClick()\">Xem kết quả</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"mt-4 text-[20px]\">\r\n");
      out.write("            Kết quả:<span id=\"result\"></span>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("    const handleClick = () => {\r\n");
      out.write("        const day = parseInt(document.getElementById(\"DaySelect\").value);\r\n");
      out.write("        const month = parseInt(document.getElementById(\"MonthSelect\").value);\r\n");
      out.write("        const year = parseInt(document.getElementById(\"YearSelect\").value);\r\n");
      out.write("        \r\n");
      out.write("        const result = document.getElementById(\"result\");\r\n");
      out.write("\r\n");
      out.write("        const date = new Date(year, month - 1, day);\r\n");
      out.write("        \r\n");
      out.write("        if (date.getFullYear() !== year || date.getMonth() !== month - 1 || date.getDate() !== day) {\r\n");
      out.write("        	result.innerText = \" Ngày không hợp lệ\";\r\n");
      out.write("        	return;\r\n");
      out.write("        }\r\n");
      out.write("       \r\n");
      out.write("        result.innerText =\" \" + day + \"/\" + month + \"/\" + year\r\n");
      out.write("        \r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
